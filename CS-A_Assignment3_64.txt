Assignment 3
Name: Disha Khater
Roll no: 64
GR no: 12010067
CS-A Batch 3
---------------------------------------------------------------------------------------1. First come First serve (zeroth arrival time)
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Scanner;
public class FCFS {
public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
System.out.println("enter number of processors");
int n=sc.nextInt();
System.out.println("Enter Burst time");
int burst[]=new int[n];
int waiting[]=new int[n];
for(int i=0;i<n;i++){
burst[i]=sc.nextInt();
}
//Zeroth Arrival Time
waiting[0]=0;
for(int i=1;i<n;i++){
waiting[i]=waiting[i-1]+burst[i-1];
}
for(int i=0;i<n;i++){
System.out.println("Waiting time P"+i+": "+waiting[i]);
}
int turnaround[]=new int[n];
for(int i=0;i<n;i++){
turnaround[i]=burst[i]+waiting[i];
}
for(int i=0;i<n;i++){
System.out.println("Turn around time P"+i+": "+turnaround[i]);
}

}

}

2. First come first serve (different arrival time)
import java.util.Scanner;
//FIRST COME FIRST SERVE
public class FCFS_DIFF_ARRIVAL {
public static void main(String[] args) {
System.out.println("Enter the number of process");
Scanner in = new Scanner(System.in);
int numberOfProcesses = in.nextInt();
int pid[] = new int[numberOfProcesses];
int bt[] = new int[numberOfProcesses];
int ar[] = new int[numberOfProcesses];
int ct[] = new int[numberOfProcesses];
int ta[] = new int[numberOfProcesses];
int wt[] = new int[numberOfProcesses];
for(int i = 0; i < numberOfProcesses; i++) {
System.out.println("Enter process " + (i+1) + " arrival time: ");
ar[i] = in.nextInt();

System.out.println("Enter process " + (i+1) + " burst time: ");
bt[i] = in.nextInt();
pid[i] = i+1;
}
int temp;
for (int i = 0; i < numberOfProcesses; i++) {
for (int j = i+1; j < numberOfProcesses; j++) {
if(ar[i] > ar[j]) {
temp = ar[i];
ar[i] = ar[j];
ar[j] = temp;
temp = pid[i];
pid[i] = pid[j];
pid[j] = temp;
temp = bt[i];
bt[i] = bt[j];
bt[j] = temp;
}
}
}
System.out.println();
ct[0] = bt[0] + ar[0];
for(int i = 1; i < numberOfProcesses; i++) {
ct[i] = ct[i - 1] + bt[i];
}
for(int i = 0; i < numberOfProcesses; i++) {
ta[i] = ct[i] - ar[i];
wt[i] = ta[i] - bt[i];
}
System.out.println("Process\t\tAT\t\tBT\t\tCT\t\tTAT\t\tWT");
for(int i = 0; i < numberOfProcesses; i++) {
System.out.println(pid[i]+"\t\t\t" + ar[i] + "\t\t" + bt[i]+ "\t\t" + ct[i]+ "\t\t" + ta[i]+ "\t\t" + wt[i]);
}
System.out.println("gantt chart: ");
for(int i = 0; i < numberOfProcesses; i++) {
System.out.print("P" + pid[i] +" ");
}
}
}

3. Shortest Job First Scheduling (zeroth arrival time)
â€¢

Shortest Job First (SJF) is a Scheduling Algorithm where the process are executed in
ascending order of their burst time, that is, the process having the shortest burst time is
executed first and so on.

import java.util.Scanner;
public class SJF {

public static void main(String args[])
{
Scanner sc = new Scanner(System.in);
System.out.println ("enter no of process:");
int n = sc.nextInt();
int pid[] = new int[n];
int at[] = new int[n];
int bt[] = new int[n];
int ct[] = new int[n];
int ta[] = new int[n];
int wt[] = new int[n];
int f[] = new int[n];
int st=0, tot=0;
float avgwt=0, avgta=0;
for(int i=0;i<n;i++)
{
System.out.println ("enter process " + (i+1) + " arrival time:");
at[i] = sc.nextInt();
System.out.println ("enter process " + (i+1) + " brust time:");
bt[i] = sc.nextInt();
pid[i] = i+1;
f[i] = 0;
}

while(true)
{
int c=n, min = 999999;
if (tot == n)
break;
for (int i=0; i<n; i++)
{
if ((at[i] <= st) && (f[i] == 0) && (bt[i]<min))
{
min=bt[i];
c=i;
}
}
if (c==n)
st++;
else
{
ct[c]=st+bt[c];
st+=bt[c];
ta[c]=ct[c]-at[c];
wt[c]=ta[c]-bt[c];
f[c]=1;
pid[tot] = c + 1;
tot++;
}
}

System.out.println("\npid arrival brust complete turn waiting");
for(int i=0;i<n;i++)
{
avgwt+= wt[i];
avgta+= ta[i];
System.out.println(pid[i]+"\t\t"+at[i]+"\t\t"+bt[i]+"\t\t"+ct[i]+"\t\t"+ta[i]+"\t\t"+wt[i]);
}
System.out.println ("\naverage tat is "+ (float)(avgta/n));
System.out.println ("average wt is "+ (float)(avgwt/n));
sc.close();
for(int i=0;i<n;i++)
{
System.out.print(pid[i] + " ");
}
}
}

4. Shortest Job First Scheduling (Different arrival time)
import java.util.Scanner;
public class SJF {
public static void main(String args[])
{
Scanner sc = new Scanner(System.in);
System.out.println ("enter no of process:");
int n = sc.nextInt();
int pid[] = new int[n];
int at[] = new int[n];
int bt[] = new int[n];
int ct[] = new int[n];
int ta[] = new int[n];
int wt[] = new int[n];
int f[] = new int[n];
int st=0, tot=0;
float avgwt=0, avgta=0;
for(int i=0;i<n;i++)
{
System.out.println ("enter process " + (i+1) + " arrival time:");
at[i] = sc.nextInt();
System.out.println ("enter process " + (i+1) + " brust time:");
bt[i] = sc.nextInt();
pid[i] = i+1;
f[i] = 0;
}
while(true)
{
int c=n, min = 999999;
if (tot == n)
break;
for (int i=0; i<n; i++)
{
if ((at[i] <= st) && (f[i] == 0) && (bt[i]<min))
{
min=bt[i];
c=i;
}
}
if (c==n)
st++;
else
{
ct[c]=st+bt[c];
st+=bt[c];
ta[c]=ct[c]-at[c];
wt[c]=ta[c]-bt[c];
f[c]=1;
pid[tot] = c + 1;
tot++;

}
}
System.out.println("\npid
for(int i=0;i<n;i++)
{
avgwt+= wt[i];
avgta+= ta[i];

arrival brust

complete turn waiting");

System.out.println(pid[i]+"\t\t"+at[i]+"\t\t"+bt[i]+"\t\t"+ct[i]+"\t\t"+ta[i]
+"\t\t"+wt[i]);
}
System.out.println ("\naverage tat is "+ (float)(avgta/n));
System.out.println ("average wt is "+ (float)(avgwt/n));
sc.close();
for(int i=0;i<n;i++)
{
System.out.print(pid[i] + " ");
}
}
}

